# Makefile.in generated by automake 1.9.6 from Makefile.am.
# globule/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/mod-globule
pkglibdir = $(libdir)/mod-globule
pkgincludedir = $(includedir)/mod-globule
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = globuleutil$(EXEEXT) globuleprobe$(EXEEXT)
EXTRA_PROGRAMS = globuledebug$(EXEEXT)
#am__append_1 = -finstrument-functions \
#	-Wl,"--wrap=__cyg_profile_func_enter" \
#	-Wl,"--wrap=__cyg_profile_func_exit"
#am__append_2 = ./myapr_rmm.h ./myapr_rmm.c
subdir = globule
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/config.h.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h $(top_builddir)/psodium/config.h \
	$(top_builddir)/monitor/config.h
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)"
libLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(lib_LTLIBRARIES)
am__DEPENDENCIES_1 = 
mod_globule_la_DEPENDENCIES = adapt/libadapt.la $(am__DEPENDENCIES_1)
am__mod_globule_la_SOURCES_DIST = psodium.h utilities.cpp \
	exceptions.cpp utilities.h monitoring.cpp monitoring.h \
	redirect/dns_config.h redirect/dns_comm.h \
	redirect/dns_comm.cpp redirect/mod_netairt.h \
	redirect/mod_netairt.cpp redirect/dns_protocol.h \
	redirect/dns_protocol.cpp redirect/dns_policy.hpp \
	redirect/dns_policy.cpp redirect/dns_policy_rr.hpp \
	redirect/dns_policy_rr.cpp redirect/dns_policy_wrr.hpp \
	redirect/dns_policy_wrr.cpp redirect/dns_policy_wrand.hpp \
	redirect/dns_policy_wrand.cpp redirect/dns_policy_as.hpp \
	redirect/dns_policy_as.cpp redirect/dns_policy_balanced.hpp \
	redirect/dns_policy_balanced.cpp Constants.hpp Storage.cpp \
	Storage.hpp FilterConfiguration.cpp FilterConfiguration.hpp \
	alloc/Allocator.hpp alloc/Allocator.cpp locking.hpp \
	locking.cpp heartbeat.hpp heartbeat.cpp filemonitor.hpp \
	filemonitor.cpp policy/ReplPolicy.hpp policy/ReplPolicy.cpp \
	policy/SpecialPolicy.hpp policy/SpecialPolicy.cpp \
	policy/InvalidatePolicy.hpp policy/InvalidatePolicy.cpp \
	policy/PureProxyPolicy.hpp policy/PureProxyPolicy.cpp \
	policy/MirrorNoConsPolicy.hpp policy/MirrorNoConsPolicy.cpp \
	policy/AlexPolicy.hpp policy/AlexPolicy.cpp \
	policy/TtlPolicy.hpp policy/TtlPolicy.cpp \
	policy/GlobeCBPolicy.hpp policy/GlobeCBPolicy.cpp \
	resource/Handler.hpp resource/Handler.cpp resource/Peer.hpp \
	resource/Peer.cpp resource/BaseHandler.hpp \
	resource/BaseHandler.cpp resource/ConfigHandler.hpp \
	resource/ConfigHandler.cpp resource/BrokeredHandler.hpp \
	resource/BrokeredHandler.cpp resource/ImportHandler.hpp \
	resource/ImportHandler.cpp resource/KeeperHandler.hpp \
	resource/KeeperHandler.cpp resource/NameBindingHandler.hpp \
	resource/NameBindingHandler.cpp resource/RedirectorHandler.hpp \
	resource/RedirectorHandler.cpp resource/SourceHandler.hpp \
	resource/SourceHandler.cpp resource/OriginHandler.hpp \
	resource/OriginHandler.cpp resource/DatabaseHandler.hpp \
	resource/DatabaseHandler.cpp resource/ProxyHandler.hpp \
	resource/ProxyHandler.cpp event/EventMgr.cpp \
	event/EventMgr.hpp event/GlobuleEvent.hpp \
	event/GlobuleEvent.cpp event/HttpMetaEvent.hpp \
	event/HttpReqEvent.hpp event/LoadEvent.hpp \
	event/HttpLogEvent.hpp event/SwitchEvent.hpp \
	event/PostRequestEvent.hpp event/RedirectEvent.hpp \
	event/RedirectEvent.cpp event/ReportEvent.hpp \
	event/ReportEvent.cpp event/RegisterEvent.hpp \
	event/RegisterEvent.cpp event/HeartBeatEvent.hpp \
	event/FileMonitorEvent.hpp event/EvictionEvent.hpp \
	netw/HttpRequest.cpp netw/HttpRequest.hpp netw/Url.cpp \
	netw/Url.hpp documents.hpp documents.cpp resources.hpp \
	resources.cpp configuration.hpp mod_globule.cpp ./myapr_rmm.h \
	./myapr_rmm.c
#am__objects_1 = mod_globule_la-myapr_rmm.lo
am_mod_globule_la_OBJECTS = mod_globule_la-utilities.lo \
	mod_globule_la-exceptions.lo mod_globule_la-monitoring.lo \
	mod_globule_la-dns_comm.lo mod_globule_la-mod_netairt.lo \
	mod_globule_la-dns_protocol.lo mod_globule_la-dns_policy.lo \
	mod_globule_la-dns_policy_rr.lo \
	mod_globule_la-dns_policy_wrr.lo \
	mod_globule_la-dns_policy_wrand.lo \
	mod_globule_la-dns_policy_as.lo \
	mod_globule_la-dns_policy_balanced.lo \
	mod_globule_la-Storage.lo \
	mod_globule_la-FilterConfiguration.lo \
	mod_globule_la-Allocator.lo mod_globule_la-locking.lo \
	mod_globule_la-heartbeat.lo mod_globule_la-filemonitor.lo \
	mod_globule_la-ReplPolicy.lo mod_globule_la-SpecialPolicy.lo \
	mod_globule_la-InvalidatePolicy.lo \
	mod_globule_la-PureProxyPolicy.lo \
	mod_globule_la-MirrorNoConsPolicy.lo \
	mod_globule_la-AlexPolicy.lo mod_globule_la-TtlPolicy.lo \
	mod_globule_la-GlobeCBPolicy.lo mod_globule_la-Handler.lo \
	mod_globule_la-Peer.lo mod_globule_la-BaseHandler.lo \
	mod_globule_la-ConfigHandler.lo \
	mod_globule_la-BrokeredHandler.lo \
	mod_globule_la-ImportHandler.lo \
	mod_globule_la-KeeperHandler.lo \
	mod_globule_la-NameBindingHandler.lo \
	mod_globule_la-RedirectorHandler.lo \
	mod_globule_la-SourceHandler.lo \
	mod_globule_la-OriginHandler.lo \
	mod_globule_la-DatabaseHandler.lo \
	mod_globule_la-ProxyHandler.lo mod_globule_la-EventMgr.lo \
	mod_globule_la-GlobuleEvent.lo mod_globule_la-RedirectEvent.lo \
	mod_globule_la-ReportEvent.lo mod_globule_la-RegisterEvent.lo \
	mod_globule_la-HttpRequest.lo mod_globule_la-Url.lo \
	mod_globule_la-documents.lo mod_globule_la-resources.lo \
	mod_globule_la-mod_globule.lo $(am__objects_1)
mod_globule_la_OBJECTS = $(am_mod_globule_la_OBJECTS)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_globuledebug_OBJECTS = globuledebug-globuledebug.$(OBJEXT) \
	globuledebug-BaseHandler.$(OBJEXT) globuledebug-Peer.$(OBJEXT) \
	globuledebug-Storage.$(OBJEXT) \
	globuledebug-HttpRequest.$(OBJEXT) globuledebug-Url.$(OBJEXT) \
	globuledebug-utilities.$(OBJEXT) \
	globuledebug-exceptions.$(OBJEXT)
globuledebug_OBJECTS = $(am_globuledebug_OBJECTS)
globuledebug_LDADD = $(LDADD)
am_globuleprobe_OBJECTS = globuleprobe-globuleprobe.$(OBJEXT) \
	globuleprobe-Storage.$(OBJEXT) \
	globuleprobe-HttpRequest.$(OBJEXT) globuleprobe-Url.$(OBJEXT) \
	globuleprobe-utilities.$(OBJEXT) \
	globuleprobe-exceptions.$(OBJEXT)
globuleprobe_OBJECTS = $(am_globuleprobe_OBJECTS)
globuleprobe_LDADD = $(LDADD)
am_globuleutil_OBJECTS = globuleutil.$(OBJEXT)
globuleutil_OBJECTS = $(am_globuleutil_OBJECTS)
globuleutil_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I. -I$(top_builddir)/psodium -I$(top_builddir)/monitor
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(mod_globule_la_SOURCES) $(globuledebug_SOURCES) \
	$(globuleprobe_SOURCES) $(globuleutil_SOURCES)
DIST_SOURCES = $(am__mod_globule_la_SOURCES_DIST) \
	$(globuledebug_SOURCES) $(globuleprobe_SOURCES) \
	$(globuleutil_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-exec-recursive install-info-recursive \
	install-recursive installcheck-recursive installdirs-recursive \
	pdf-recursive ps-recursive uninstall-info-recursive \
	uninstall-recursive
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/linux-globule/Downloads/setup2/mod-globule-1.3.2/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/linux-globule/Downloads/setup2/mod-globule-1.3.2/missing --run tar
APACHE = yes
APRCONFIG = /usr/local/globule-Setup2/bin/apr-1-config
APUCONFIG = /usr/local/globule-Setup2/bin/apu-1-config
APXS = /usr/local/globule-Setup2/bin/apxs
AR = ar
AUTOCONF = ${SHELL} /home/linux-globule/Downloads/setup2/mod-globule-1.3.2/missing --run autoconf
AUTOHEADER = ${SHELL} /home/linux-globule/Downloads/setup2/mod-globule-1.3.2/missing --run autoheader
AUTOMAKE = ${SHELL} /home/linux-globule/Downloads/setup2/mod-globule-1.3.2/missing --run automake-1.9
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS =  -g -O2 -pthread  -I/usr/local/globule-Setup2/include    -D_LARGEFILE64_SOURCE -Wmissing-declarations
CPP = gcc -E
CPPFLAGS =  -I/usr/local/globule-Setup2/include    -I/usr/local/globule-Setup2/include  -I/usr/local/globule-Setup2/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -D_REENTRANT -D_GNU_SOURCE -g -O2 
CYGPATH_W = echo
DEBUGGCC_FALSE = 
DEBUGGCC_TRUE = #
DEBUG_FALSE = 
DEBUG_TRUE = #
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = 
FFLAGS = 
HTTPD = /usr/local/globule-Setup2/bin/httpd
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
INSTDOCUMENTATION = 
INSTDOCUMENTATION_FALSE = 
INSTDOCUMENTATION_TRUE = #
INSTGLOBULEADM = 
INSTGLOBULEADM_FALSE = 
INSTGLOBULEADM_TRUE = #
LDFLAGS =  /usr/local/globule-Setup2/lib/libapr-1.la -lrt -lcrypt  -lpthread -ldl   /usr/local/globule-Setup2/lib/libaprutil-1.la -lexpat -L/usr/local/globule-Setup2/lib -release 1.3.2
LIBOBJS = 
LIBS = -lz -lresolv 
LIBTOOL := $(SHELL) $(top_builddir)/libtool --silent
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/linux-globule/Downloads/setup2/mod-globule-1.3.2/missing --run makeinfo
OBJEXT = o
OPENSSLDIR = 
OPTIMIZE_FALSE = 
OPTIMIZE_TRUE = #
PACKAGE = mod-globule
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PROFILE_FALSE = 
PROFILE_TRUE = #
PSODIUM_FALSE = 
PSODIUM_TRUE = #
RANLIB = ranlib
REPLACEMENTRMM_FALSE = 
REPLACEMENTRMM_TRUE = #
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 1.3.2
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = /usr/local/globule-Setup2/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/linux-globule/Downloads/setup2/mod-globule-1.3.2/install-sh
libdir = /usr/local/globule-Setup2/modules
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /dev/null
program_transform_name = s,x,x,
sbindir = /usr/local/globule-Setup2/bin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
SUBDIRS = adapt
lib_LTLIBRARIES = mod_globule.la
globuleutil_SOURCES = globuleutil.cpp
globuleprobe_CFLAGS = -DSTANDALONE_APR
globuleprobe_CPPFLAGS = -DSTANDALONE_APR
globuleprobe_SOURCES = globuleprobe.cpp \
  Storage.cpp netw/HttpRequest.cpp netw/Url.cpp utilities.cpp exceptions.cpp

globuledebug_CFLAGS = -DSTANDALONE_APR
globuledebug_CPPFLAGS = -DSTANDALONE_APR
globuledebug_SOURCES = globuledebug.cpp \
  resource/BaseHandler.cpp resource/Peer.cpp \
  Storage.cpp netw/HttpRequest.cpp netw/Url.cpp utilities.cpp exceptions.cpp

mod_globule_la_LIBADD = adapt/libadapt.la $(LTLIBOBJS)
mod_globule_la_LDFLAGS = -module $(am__append_1)
#mod_globule_la_CFLAGS = -finstrument-functions
#mod_globule_la_CXXFLAGS = -finstrument-functions
mod_globule_la_SOURCES = psodium.h utilities.cpp exceptions.cpp \
	utilities.h monitoring.cpp monitoring.h redirect/dns_config.h \
	redirect/dns_comm.h redirect/dns_comm.cpp \
	redirect/mod_netairt.h redirect/mod_netairt.cpp \
	redirect/dns_protocol.h redirect/dns_protocol.cpp \
	redirect/dns_policy.hpp redirect/dns_policy.cpp \
	redirect/dns_policy_rr.hpp redirect/dns_policy_rr.cpp \
	redirect/dns_policy_wrr.hpp redirect/dns_policy_wrr.cpp \
	redirect/dns_policy_wrand.hpp redirect/dns_policy_wrand.cpp \
	redirect/dns_policy_as.hpp redirect/dns_policy_as.cpp \
	redirect/dns_policy_balanced.hpp \
	redirect/dns_policy_balanced.cpp Constants.hpp Storage.cpp \
	Storage.hpp FilterConfiguration.cpp FilterConfiguration.hpp \
	alloc/Allocator.hpp alloc/Allocator.cpp locking.hpp \
	locking.cpp heartbeat.hpp heartbeat.cpp filemonitor.hpp \
	filemonitor.cpp policy/ReplPolicy.hpp policy/ReplPolicy.cpp \
	policy/SpecialPolicy.hpp policy/SpecialPolicy.cpp \
	policy/InvalidatePolicy.hpp policy/InvalidatePolicy.cpp \
	policy/PureProxyPolicy.hpp policy/PureProxyPolicy.cpp \
	policy/MirrorNoConsPolicy.hpp policy/MirrorNoConsPolicy.cpp \
	policy/AlexPolicy.hpp policy/AlexPolicy.cpp \
	policy/TtlPolicy.hpp policy/TtlPolicy.cpp \
	policy/GlobeCBPolicy.hpp policy/GlobeCBPolicy.cpp \
	resource/Handler.hpp resource/Handler.cpp resource/Peer.hpp \
	resource/Peer.cpp resource/BaseHandler.hpp \
	resource/BaseHandler.cpp resource/ConfigHandler.hpp \
	resource/ConfigHandler.cpp resource/BrokeredHandler.hpp \
	resource/BrokeredHandler.cpp resource/ImportHandler.hpp \
	resource/ImportHandler.cpp resource/KeeperHandler.hpp \
	resource/KeeperHandler.cpp resource/NameBindingHandler.hpp \
	resource/NameBindingHandler.cpp resource/RedirectorHandler.hpp \
	resource/RedirectorHandler.cpp resource/SourceHandler.hpp \
	resource/SourceHandler.cpp resource/OriginHandler.hpp \
	resource/OriginHandler.cpp resource/DatabaseHandler.hpp \
	resource/DatabaseHandler.cpp resource/ProxyHandler.hpp \
	resource/ProxyHandler.cpp event/EventMgr.cpp \
	event/EventMgr.hpp event/GlobuleEvent.hpp \
	event/GlobuleEvent.cpp event/HttpMetaEvent.hpp \
	event/HttpReqEvent.hpp event/LoadEvent.hpp \
	event/HttpLogEvent.hpp event/SwitchEvent.hpp \
	event/PostRequestEvent.hpp event/RedirectEvent.hpp \
	event/RedirectEvent.cpp event/ReportEvent.hpp \
	event/ReportEvent.cpp event/RegisterEvent.hpp \
	event/RegisterEvent.cpp event/HeartBeatEvent.hpp \
	event/FileMonitorEvent.hpp event/EvictionEvent.hpp \
	netw/HttpRequest.cpp netw/HttpRequest.hpp netw/Url.cpp \
	netw/Url.hpp documents.hpp documents.cpp resources.hpp \
	resources.cpp configuration.hpp mod_globule.cpp \
	$(am__append_2)
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  globule/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  globule/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status globule/config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	cd $(top_srcdir) && $(AUTOHEADER)
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(mkdir_p) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@set -x; list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
mod_globule.la: $(mod_globule_la_OBJECTS) $(mod_globule_la_DEPENDENCIES) 
	$(CXXLINK) -rpath $(libdir) $(mod_globule_la_LDFLAGS) $(mod_globule_la_OBJECTS) $(mod_globule_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
globuledebug$(EXEEXT): $(globuledebug_OBJECTS) $(globuledebug_DEPENDENCIES) 
	@rm -f globuledebug$(EXEEXT)
	$(CXXLINK) $(globuledebug_LDFLAGS) $(globuledebug_OBJECTS) $(globuledebug_LDADD) $(LIBS)
globuleprobe$(EXEEXT): $(globuleprobe_OBJECTS) $(globuleprobe_DEPENDENCIES) 
	@rm -f globuleprobe$(EXEEXT)
	$(CXXLINK) $(globuleprobe_LDFLAGS) $(globuleprobe_OBJECTS) $(globuleprobe_LDADD) $(LIBS)
globuleutil$(EXEEXT): $(globuleutil_OBJECTS) $(globuleutil_DEPENDENCIES) 
	@rm -f globuleutil$(EXEEXT)
	$(CXXLINK) $(globuleutil_LDFLAGS) $(globuleutil_OBJECTS) $(globuleutil_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/globuledebug-BaseHandler.Po
include ./$(DEPDIR)/globuledebug-HttpRequest.Po
include ./$(DEPDIR)/globuledebug-Peer.Po
include ./$(DEPDIR)/globuledebug-Storage.Po
include ./$(DEPDIR)/globuledebug-Url.Po
include ./$(DEPDIR)/globuledebug-exceptions.Po
include ./$(DEPDIR)/globuledebug-globuledebug.Po
include ./$(DEPDIR)/globuledebug-utilities.Po
include ./$(DEPDIR)/globuleprobe-HttpRequest.Po
include ./$(DEPDIR)/globuleprobe-Storage.Po
include ./$(DEPDIR)/globuleprobe-Url.Po
include ./$(DEPDIR)/globuleprobe-exceptions.Po
include ./$(DEPDIR)/globuleprobe-globuleprobe.Po
include ./$(DEPDIR)/globuleprobe-utilities.Po
include ./$(DEPDIR)/globuleutil.Po
include ./$(DEPDIR)/mod_globule_la-AlexPolicy.Plo
include ./$(DEPDIR)/mod_globule_la-Allocator.Plo
include ./$(DEPDIR)/mod_globule_la-BaseHandler.Plo
include ./$(DEPDIR)/mod_globule_la-BrokeredHandler.Plo
include ./$(DEPDIR)/mod_globule_la-ConfigHandler.Plo
include ./$(DEPDIR)/mod_globule_la-DatabaseHandler.Plo
include ./$(DEPDIR)/mod_globule_la-EventMgr.Plo
include ./$(DEPDIR)/mod_globule_la-FilterConfiguration.Plo
include ./$(DEPDIR)/mod_globule_la-GlobeCBPolicy.Plo
include ./$(DEPDIR)/mod_globule_la-GlobuleEvent.Plo
include ./$(DEPDIR)/mod_globule_la-Handler.Plo
include ./$(DEPDIR)/mod_globule_la-HttpRequest.Plo
include ./$(DEPDIR)/mod_globule_la-ImportHandler.Plo
include ./$(DEPDIR)/mod_globule_la-InvalidatePolicy.Plo
include ./$(DEPDIR)/mod_globule_la-KeeperHandler.Plo
include ./$(DEPDIR)/mod_globule_la-MirrorNoConsPolicy.Plo
include ./$(DEPDIR)/mod_globule_la-NameBindingHandler.Plo
include ./$(DEPDIR)/mod_globule_la-OriginHandler.Plo
include ./$(DEPDIR)/mod_globule_la-Peer.Plo
include ./$(DEPDIR)/mod_globule_la-ProxyHandler.Plo
include ./$(DEPDIR)/mod_globule_la-PureProxyPolicy.Plo
include ./$(DEPDIR)/mod_globule_la-RedirectEvent.Plo
include ./$(DEPDIR)/mod_globule_la-RedirectorHandler.Plo
include ./$(DEPDIR)/mod_globule_la-RegisterEvent.Plo
include ./$(DEPDIR)/mod_globule_la-ReplPolicy.Plo
include ./$(DEPDIR)/mod_globule_la-ReportEvent.Plo
include ./$(DEPDIR)/mod_globule_la-SourceHandler.Plo
include ./$(DEPDIR)/mod_globule_la-SpecialPolicy.Plo
include ./$(DEPDIR)/mod_globule_la-Storage.Plo
include ./$(DEPDIR)/mod_globule_la-TtlPolicy.Plo
include ./$(DEPDIR)/mod_globule_la-Url.Plo
include ./$(DEPDIR)/mod_globule_la-dns_comm.Plo
include ./$(DEPDIR)/mod_globule_la-dns_policy.Plo
include ./$(DEPDIR)/mod_globule_la-dns_policy_as.Plo
include ./$(DEPDIR)/mod_globule_la-dns_policy_balanced.Plo
include ./$(DEPDIR)/mod_globule_la-dns_policy_rr.Plo
include ./$(DEPDIR)/mod_globule_la-dns_policy_wrand.Plo
include ./$(DEPDIR)/mod_globule_la-dns_policy_wrr.Plo
include ./$(DEPDIR)/mod_globule_la-dns_protocol.Plo
include ./$(DEPDIR)/mod_globule_la-documents.Plo
include ./$(DEPDIR)/mod_globule_la-exceptions.Plo
include ./$(DEPDIR)/mod_globule_la-filemonitor.Plo
include ./$(DEPDIR)/mod_globule_la-heartbeat.Plo
include ./$(DEPDIR)/mod_globule_la-locking.Plo
include ./$(DEPDIR)/mod_globule_la-mod_globule.Plo
include ./$(DEPDIR)/mod_globule_la-mod_netairt.Plo
include ./$(DEPDIR)/mod_globule_la-monitoring.Plo
include ./$(DEPDIR)/mod_globule_la-myapr_rmm.Plo
include ./$(DEPDIR)/mod_globule_la-resources.Plo
include ./$(DEPDIR)/mod_globule_la-utilities.Plo

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mod_globule_la-myapr_rmm.lo: ./myapr_rmm.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CFLAGS) $(CFLAGS) -MT mod_globule_la-myapr_rmm.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-myapr_rmm.Tpo" -c -o mod_globule_la-myapr_rmm.lo `test -f './myapr_rmm.c' || echo '$(srcdir)/'`./myapr_rmm.c; \
	then mv -f "$(DEPDIR)/mod_globule_la-myapr_rmm.Tpo" "$(DEPDIR)/mod_globule_la-myapr_rmm.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-myapr_rmm.Tpo"; exit 1; fi
#	source='./myapr_rmm.c' object='mod_globule_la-myapr_rmm.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CFLAGS) $(CFLAGS) -c -o mod_globule_la-myapr_rmm.lo `test -f './myapr_rmm.c' || echo '$(srcdir)/'`./myapr_rmm.c

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

mod_globule_la-utilities.lo: utilities.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-utilities.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-utilities.Tpo" -c -o mod_globule_la-utilities.lo `test -f 'utilities.cpp' || echo '$(srcdir)/'`utilities.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-utilities.Tpo" "$(DEPDIR)/mod_globule_la-utilities.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-utilities.Tpo"; exit 1; fi
#	source='utilities.cpp' object='mod_globule_la-utilities.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-utilities.lo `test -f 'utilities.cpp' || echo '$(srcdir)/'`utilities.cpp

mod_globule_la-exceptions.lo: exceptions.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-exceptions.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-exceptions.Tpo" -c -o mod_globule_la-exceptions.lo `test -f 'exceptions.cpp' || echo '$(srcdir)/'`exceptions.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-exceptions.Tpo" "$(DEPDIR)/mod_globule_la-exceptions.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-exceptions.Tpo"; exit 1; fi
#	source='exceptions.cpp' object='mod_globule_la-exceptions.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-exceptions.lo `test -f 'exceptions.cpp' || echo '$(srcdir)/'`exceptions.cpp

mod_globule_la-monitoring.lo: monitoring.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-monitoring.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-monitoring.Tpo" -c -o mod_globule_la-monitoring.lo `test -f 'monitoring.cpp' || echo '$(srcdir)/'`monitoring.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-monitoring.Tpo" "$(DEPDIR)/mod_globule_la-monitoring.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-monitoring.Tpo"; exit 1; fi
#	source='monitoring.cpp' object='mod_globule_la-monitoring.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-monitoring.lo `test -f 'monitoring.cpp' || echo '$(srcdir)/'`monitoring.cpp

mod_globule_la-dns_comm.lo: redirect/dns_comm.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-dns_comm.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-dns_comm.Tpo" -c -o mod_globule_la-dns_comm.lo `test -f 'redirect/dns_comm.cpp' || echo '$(srcdir)/'`redirect/dns_comm.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-dns_comm.Tpo" "$(DEPDIR)/mod_globule_la-dns_comm.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-dns_comm.Tpo"; exit 1; fi
#	source='redirect/dns_comm.cpp' object='mod_globule_la-dns_comm.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-dns_comm.lo `test -f 'redirect/dns_comm.cpp' || echo '$(srcdir)/'`redirect/dns_comm.cpp

mod_globule_la-mod_netairt.lo: redirect/mod_netairt.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-mod_netairt.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-mod_netairt.Tpo" -c -o mod_globule_la-mod_netairt.lo `test -f 'redirect/mod_netairt.cpp' || echo '$(srcdir)/'`redirect/mod_netairt.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-mod_netairt.Tpo" "$(DEPDIR)/mod_globule_la-mod_netairt.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-mod_netairt.Tpo"; exit 1; fi
#	source='redirect/mod_netairt.cpp' object='mod_globule_la-mod_netairt.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-mod_netairt.lo `test -f 'redirect/mod_netairt.cpp' || echo '$(srcdir)/'`redirect/mod_netairt.cpp

mod_globule_la-dns_protocol.lo: redirect/dns_protocol.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-dns_protocol.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-dns_protocol.Tpo" -c -o mod_globule_la-dns_protocol.lo `test -f 'redirect/dns_protocol.cpp' || echo '$(srcdir)/'`redirect/dns_protocol.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-dns_protocol.Tpo" "$(DEPDIR)/mod_globule_la-dns_protocol.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-dns_protocol.Tpo"; exit 1; fi
#	source='redirect/dns_protocol.cpp' object='mod_globule_la-dns_protocol.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-dns_protocol.lo `test -f 'redirect/dns_protocol.cpp' || echo '$(srcdir)/'`redirect/dns_protocol.cpp

mod_globule_la-dns_policy.lo: redirect/dns_policy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-dns_policy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-dns_policy.Tpo" -c -o mod_globule_la-dns_policy.lo `test -f 'redirect/dns_policy.cpp' || echo '$(srcdir)/'`redirect/dns_policy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-dns_policy.Tpo" "$(DEPDIR)/mod_globule_la-dns_policy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-dns_policy.Tpo"; exit 1; fi
#	source='redirect/dns_policy.cpp' object='mod_globule_la-dns_policy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-dns_policy.lo `test -f 'redirect/dns_policy.cpp' || echo '$(srcdir)/'`redirect/dns_policy.cpp

mod_globule_la-dns_policy_rr.lo: redirect/dns_policy_rr.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-dns_policy_rr.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-dns_policy_rr.Tpo" -c -o mod_globule_la-dns_policy_rr.lo `test -f 'redirect/dns_policy_rr.cpp' || echo '$(srcdir)/'`redirect/dns_policy_rr.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-dns_policy_rr.Tpo" "$(DEPDIR)/mod_globule_la-dns_policy_rr.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-dns_policy_rr.Tpo"; exit 1; fi
#	source='redirect/dns_policy_rr.cpp' object='mod_globule_la-dns_policy_rr.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-dns_policy_rr.lo `test -f 'redirect/dns_policy_rr.cpp' || echo '$(srcdir)/'`redirect/dns_policy_rr.cpp

mod_globule_la-dns_policy_wrr.lo: redirect/dns_policy_wrr.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-dns_policy_wrr.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-dns_policy_wrr.Tpo" -c -o mod_globule_la-dns_policy_wrr.lo `test -f 'redirect/dns_policy_wrr.cpp' || echo '$(srcdir)/'`redirect/dns_policy_wrr.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-dns_policy_wrr.Tpo" "$(DEPDIR)/mod_globule_la-dns_policy_wrr.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-dns_policy_wrr.Tpo"; exit 1; fi
#	source='redirect/dns_policy_wrr.cpp' object='mod_globule_la-dns_policy_wrr.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-dns_policy_wrr.lo `test -f 'redirect/dns_policy_wrr.cpp' || echo '$(srcdir)/'`redirect/dns_policy_wrr.cpp

mod_globule_la-dns_policy_wrand.lo: redirect/dns_policy_wrand.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-dns_policy_wrand.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-dns_policy_wrand.Tpo" -c -o mod_globule_la-dns_policy_wrand.lo `test -f 'redirect/dns_policy_wrand.cpp' || echo '$(srcdir)/'`redirect/dns_policy_wrand.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-dns_policy_wrand.Tpo" "$(DEPDIR)/mod_globule_la-dns_policy_wrand.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-dns_policy_wrand.Tpo"; exit 1; fi
#	source='redirect/dns_policy_wrand.cpp' object='mod_globule_la-dns_policy_wrand.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-dns_policy_wrand.lo `test -f 'redirect/dns_policy_wrand.cpp' || echo '$(srcdir)/'`redirect/dns_policy_wrand.cpp

mod_globule_la-dns_policy_as.lo: redirect/dns_policy_as.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-dns_policy_as.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-dns_policy_as.Tpo" -c -o mod_globule_la-dns_policy_as.lo `test -f 'redirect/dns_policy_as.cpp' || echo '$(srcdir)/'`redirect/dns_policy_as.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-dns_policy_as.Tpo" "$(DEPDIR)/mod_globule_la-dns_policy_as.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-dns_policy_as.Tpo"; exit 1; fi
#	source='redirect/dns_policy_as.cpp' object='mod_globule_la-dns_policy_as.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-dns_policy_as.lo `test -f 'redirect/dns_policy_as.cpp' || echo '$(srcdir)/'`redirect/dns_policy_as.cpp

mod_globule_la-dns_policy_balanced.lo: redirect/dns_policy_balanced.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-dns_policy_balanced.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-dns_policy_balanced.Tpo" -c -o mod_globule_la-dns_policy_balanced.lo `test -f 'redirect/dns_policy_balanced.cpp' || echo '$(srcdir)/'`redirect/dns_policy_balanced.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-dns_policy_balanced.Tpo" "$(DEPDIR)/mod_globule_la-dns_policy_balanced.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-dns_policy_balanced.Tpo"; exit 1; fi
#	source='redirect/dns_policy_balanced.cpp' object='mod_globule_la-dns_policy_balanced.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-dns_policy_balanced.lo `test -f 'redirect/dns_policy_balanced.cpp' || echo '$(srcdir)/'`redirect/dns_policy_balanced.cpp

mod_globule_la-Storage.lo: Storage.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-Storage.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-Storage.Tpo" -c -o mod_globule_la-Storage.lo `test -f 'Storage.cpp' || echo '$(srcdir)/'`Storage.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-Storage.Tpo" "$(DEPDIR)/mod_globule_la-Storage.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-Storage.Tpo"; exit 1; fi
#	source='Storage.cpp' object='mod_globule_la-Storage.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-Storage.lo `test -f 'Storage.cpp' || echo '$(srcdir)/'`Storage.cpp

mod_globule_la-FilterConfiguration.lo: FilterConfiguration.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-FilterConfiguration.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-FilterConfiguration.Tpo" -c -o mod_globule_la-FilterConfiguration.lo `test -f 'FilterConfiguration.cpp' || echo '$(srcdir)/'`FilterConfiguration.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-FilterConfiguration.Tpo" "$(DEPDIR)/mod_globule_la-FilterConfiguration.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-FilterConfiguration.Tpo"; exit 1; fi
#	source='FilterConfiguration.cpp' object='mod_globule_la-FilterConfiguration.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-FilterConfiguration.lo `test -f 'FilterConfiguration.cpp' || echo '$(srcdir)/'`FilterConfiguration.cpp

mod_globule_la-Allocator.lo: alloc/Allocator.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-Allocator.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-Allocator.Tpo" -c -o mod_globule_la-Allocator.lo `test -f 'alloc/Allocator.cpp' || echo '$(srcdir)/'`alloc/Allocator.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-Allocator.Tpo" "$(DEPDIR)/mod_globule_la-Allocator.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-Allocator.Tpo"; exit 1; fi
#	source='alloc/Allocator.cpp' object='mod_globule_la-Allocator.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-Allocator.lo `test -f 'alloc/Allocator.cpp' || echo '$(srcdir)/'`alloc/Allocator.cpp

mod_globule_la-locking.lo: locking.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-locking.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-locking.Tpo" -c -o mod_globule_la-locking.lo `test -f 'locking.cpp' || echo '$(srcdir)/'`locking.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-locking.Tpo" "$(DEPDIR)/mod_globule_la-locking.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-locking.Tpo"; exit 1; fi
#	source='locking.cpp' object='mod_globule_la-locking.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-locking.lo `test -f 'locking.cpp' || echo '$(srcdir)/'`locking.cpp

mod_globule_la-heartbeat.lo: heartbeat.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-heartbeat.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-heartbeat.Tpo" -c -o mod_globule_la-heartbeat.lo `test -f 'heartbeat.cpp' || echo '$(srcdir)/'`heartbeat.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-heartbeat.Tpo" "$(DEPDIR)/mod_globule_la-heartbeat.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-heartbeat.Tpo"; exit 1; fi
#	source='heartbeat.cpp' object='mod_globule_la-heartbeat.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-heartbeat.lo `test -f 'heartbeat.cpp' || echo '$(srcdir)/'`heartbeat.cpp

mod_globule_la-filemonitor.lo: filemonitor.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-filemonitor.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-filemonitor.Tpo" -c -o mod_globule_la-filemonitor.lo `test -f 'filemonitor.cpp' || echo '$(srcdir)/'`filemonitor.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-filemonitor.Tpo" "$(DEPDIR)/mod_globule_la-filemonitor.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-filemonitor.Tpo"; exit 1; fi
#	source='filemonitor.cpp' object='mod_globule_la-filemonitor.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-filemonitor.lo `test -f 'filemonitor.cpp' || echo '$(srcdir)/'`filemonitor.cpp

mod_globule_la-ReplPolicy.lo: policy/ReplPolicy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-ReplPolicy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-ReplPolicy.Tpo" -c -o mod_globule_la-ReplPolicy.lo `test -f 'policy/ReplPolicy.cpp' || echo '$(srcdir)/'`policy/ReplPolicy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-ReplPolicy.Tpo" "$(DEPDIR)/mod_globule_la-ReplPolicy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-ReplPolicy.Tpo"; exit 1; fi
#	source='policy/ReplPolicy.cpp' object='mod_globule_la-ReplPolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-ReplPolicy.lo `test -f 'policy/ReplPolicy.cpp' || echo '$(srcdir)/'`policy/ReplPolicy.cpp

mod_globule_la-SpecialPolicy.lo: policy/SpecialPolicy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-SpecialPolicy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-SpecialPolicy.Tpo" -c -o mod_globule_la-SpecialPolicy.lo `test -f 'policy/SpecialPolicy.cpp' || echo '$(srcdir)/'`policy/SpecialPolicy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-SpecialPolicy.Tpo" "$(DEPDIR)/mod_globule_la-SpecialPolicy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-SpecialPolicy.Tpo"; exit 1; fi
#	source='policy/SpecialPolicy.cpp' object='mod_globule_la-SpecialPolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-SpecialPolicy.lo `test -f 'policy/SpecialPolicy.cpp' || echo '$(srcdir)/'`policy/SpecialPolicy.cpp

mod_globule_la-InvalidatePolicy.lo: policy/InvalidatePolicy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-InvalidatePolicy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-InvalidatePolicy.Tpo" -c -o mod_globule_la-InvalidatePolicy.lo `test -f 'policy/InvalidatePolicy.cpp' || echo '$(srcdir)/'`policy/InvalidatePolicy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-InvalidatePolicy.Tpo" "$(DEPDIR)/mod_globule_la-InvalidatePolicy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-InvalidatePolicy.Tpo"; exit 1; fi
#	source='policy/InvalidatePolicy.cpp' object='mod_globule_la-InvalidatePolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-InvalidatePolicy.lo `test -f 'policy/InvalidatePolicy.cpp' || echo '$(srcdir)/'`policy/InvalidatePolicy.cpp

mod_globule_la-PureProxyPolicy.lo: policy/PureProxyPolicy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-PureProxyPolicy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-PureProxyPolicy.Tpo" -c -o mod_globule_la-PureProxyPolicy.lo `test -f 'policy/PureProxyPolicy.cpp' || echo '$(srcdir)/'`policy/PureProxyPolicy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-PureProxyPolicy.Tpo" "$(DEPDIR)/mod_globule_la-PureProxyPolicy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-PureProxyPolicy.Tpo"; exit 1; fi
#	source='policy/PureProxyPolicy.cpp' object='mod_globule_la-PureProxyPolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-PureProxyPolicy.lo `test -f 'policy/PureProxyPolicy.cpp' || echo '$(srcdir)/'`policy/PureProxyPolicy.cpp

mod_globule_la-MirrorNoConsPolicy.lo: policy/MirrorNoConsPolicy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-MirrorNoConsPolicy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-MirrorNoConsPolicy.Tpo" -c -o mod_globule_la-MirrorNoConsPolicy.lo `test -f 'policy/MirrorNoConsPolicy.cpp' || echo '$(srcdir)/'`policy/MirrorNoConsPolicy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-MirrorNoConsPolicy.Tpo" "$(DEPDIR)/mod_globule_la-MirrorNoConsPolicy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-MirrorNoConsPolicy.Tpo"; exit 1; fi
#	source='policy/MirrorNoConsPolicy.cpp' object='mod_globule_la-MirrorNoConsPolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-MirrorNoConsPolicy.lo `test -f 'policy/MirrorNoConsPolicy.cpp' || echo '$(srcdir)/'`policy/MirrorNoConsPolicy.cpp

mod_globule_la-AlexPolicy.lo: policy/AlexPolicy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-AlexPolicy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-AlexPolicy.Tpo" -c -o mod_globule_la-AlexPolicy.lo `test -f 'policy/AlexPolicy.cpp' || echo '$(srcdir)/'`policy/AlexPolicy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-AlexPolicy.Tpo" "$(DEPDIR)/mod_globule_la-AlexPolicy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-AlexPolicy.Tpo"; exit 1; fi
#	source='policy/AlexPolicy.cpp' object='mod_globule_la-AlexPolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-AlexPolicy.lo `test -f 'policy/AlexPolicy.cpp' || echo '$(srcdir)/'`policy/AlexPolicy.cpp

mod_globule_la-TtlPolicy.lo: policy/TtlPolicy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-TtlPolicy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-TtlPolicy.Tpo" -c -o mod_globule_la-TtlPolicy.lo `test -f 'policy/TtlPolicy.cpp' || echo '$(srcdir)/'`policy/TtlPolicy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-TtlPolicy.Tpo" "$(DEPDIR)/mod_globule_la-TtlPolicy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-TtlPolicy.Tpo"; exit 1; fi
#	source='policy/TtlPolicy.cpp' object='mod_globule_la-TtlPolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-TtlPolicy.lo `test -f 'policy/TtlPolicy.cpp' || echo '$(srcdir)/'`policy/TtlPolicy.cpp

mod_globule_la-GlobeCBPolicy.lo: policy/GlobeCBPolicy.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-GlobeCBPolicy.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-GlobeCBPolicy.Tpo" -c -o mod_globule_la-GlobeCBPolicy.lo `test -f 'policy/GlobeCBPolicy.cpp' || echo '$(srcdir)/'`policy/GlobeCBPolicy.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-GlobeCBPolicy.Tpo" "$(DEPDIR)/mod_globule_la-GlobeCBPolicy.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-GlobeCBPolicy.Tpo"; exit 1; fi
#	source='policy/GlobeCBPolicy.cpp' object='mod_globule_la-GlobeCBPolicy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-GlobeCBPolicy.lo `test -f 'policy/GlobeCBPolicy.cpp' || echo '$(srcdir)/'`policy/GlobeCBPolicy.cpp

mod_globule_la-Handler.lo: resource/Handler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-Handler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-Handler.Tpo" -c -o mod_globule_la-Handler.lo `test -f 'resource/Handler.cpp' || echo '$(srcdir)/'`resource/Handler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-Handler.Tpo" "$(DEPDIR)/mod_globule_la-Handler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-Handler.Tpo"; exit 1; fi
#	source='resource/Handler.cpp' object='mod_globule_la-Handler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-Handler.lo `test -f 'resource/Handler.cpp' || echo '$(srcdir)/'`resource/Handler.cpp

mod_globule_la-Peer.lo: resource/Peer.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-Peer.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-Peer.Tpo" -c -o mod_globule_la-Peer.lo `test -f 'resource/Peer.cpp' || echo '$(srcdir)/'`resource/Peer.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-Peer.Tpo" "$(DEPDIR)/mod_globule_la-Peer.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-Peer.Tpo"; exit 1; fi
#	source='resource/Peer.cpp' object='mod_globule_la-Peer.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-Peer.lo `test -f 'resource/Peer.cpp' || echo '$(srcdir)/'`resource/Peer.cpp

mod_globule_la-BaseHandler.lo: resource/BaseHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-BaseHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-BaseHandler.Tpo" -c -o mod_globule_la-BaseHandler.lo `test -f 'resource/BaseHandler.cpp' || echo '$(srcdir)/'`resource/BaseHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-BaseHandler.Tpo" "$(DEPDIR)/mod_globule_la-BaseHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-BaseHandler.Tpo"; exit 1; fi
#	source='resource/BaseHandler.cpp' object='mod_globule_la-BaseHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-BaseHandler.lo `test -f 'resource/BaseHandler.cpp' || echo '$(srcdir)/'`resource/BaseHandler.cpp

mod_globule_la-ConfigHandler.lo: resource/ConfigHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-ConfigHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-ConfigHandler.Tpo" -c -o mod_globule_la-ConfigHandler.lo `test -f 'resource/ConfigHandler.cpp' || echo '$(srcdir)/'`resource/ConfigHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-ConfigHandler.Tpo" "$(DEPDIR)/mod_globule_la-ConfigHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-ConfigHandler.Tpo"; exit 1; fi
#	source='resource/ConfigHandler.cpp' object='mod_globule_la-ConfigHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-ConfigHandler.lo `test -f 'resource/ConfigHandler.cpp' || echo '$(srcdir)/'`resource/ConfigHandler.cpp

mod_globule_la-BrokeredHandler.lo: resource/BrokeredHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-BrokeredHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-BrokeredHandler.Tpo" -c -o mod_globule_la-BrokeredHandler.lo `test -f 'resource/BrokeredHandler.cpp' || echo '$(srcdir)/'`resource/BrokeredHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-BrokeredHandler.Tpo" "$(DEPDIR)/mod_globule_la-BrokeredHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-BrokeredHandler.Tpo"; exit 1; fi
#	source='resource/BrokeredHandler.cpp' object='mod_globule_la-BrokeredHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-BrokeredHandler.lo `test -f 'resource/BrokeredHandler.cpp' || echo '$(srcdir)/'`resource/BrokeredHandler.cpp

mod_globule_la-ImportHandler.lo: resource/ImportHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-ImportHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-ImportHandler.Tpo" -c -o mod_globule_la-ImportHandler.lo `test -f 'resource/ImportHandler.cpp' || echo '$(srcdir)/'`resource/ImportHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-ImportHandler.Tpo" "$(DEPDIR)/mod_globule_la-ImportHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-ImportHandler.Tpo"; exit 1; fi
#	source='resource/ImportHandler.cpp' object='mod_globule_la-ImportHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-ImportHandler.lo `test -f 'resource/ImportHandler.cpp' || echo '$(srcdir)/'`resource/ImportHandler.cpp

mod_globule_la-KeeperHandler.lo: resource/KeeperHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-KeeperHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-KeeperHandler.Tpo" -c -o mod_globule_la-KeeperHandler.lo `test -f 'resource/KeeperHandler.cpp' || echo '$(srcdir)/'`resource/KeeperHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-KeeperHandler.Tpo" "$(DEPDIR)/mod_globule_la-KeeperHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-KeeperHandler.Tpo"; exit 1; fi
#	source='resource/KeeperHandler.cpp' object='mod_globule_la-KeeperHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-KeeperHandler.lo `test -f 'resource/KeeperHandler.cpp' || echo '$(srcdir)/'`resource/KeeperHandler.cpp

mod_globule_la-NameBindingHandler.lo: resource/NameBindingHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-NameBindingHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-NameBindingHandler.Tpo" -c -o mod_globule_la-NameBindingHandler.lo `test -f 'resource/NameBindingHandler.cpp' || echo '$(srcdir)/'`resource/NameBindingHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-NameBindingHandler.Tpo" "$(DEPDIR)/mod_globule_la-NameBindingHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-NameBindingHandler.Tpo"; exit 1; fi
#	source='resource/NameBindingHandler.cpp' object='mod_globule_la-NameBindingHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-NameBindingHandler.lo `test -f 'resource/NameBindingHandler.cpp' || echo '$(srcdir)/'`resource/NameBindingHandler.cpp

mod_globule_la-RedirectorHandler.lo: resource/RedirectorHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-RedirectorHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-RedirectorHandler.Tpo" -c -o mod_globule_la-RedirectorHandler.lo `test -f 'resource/RedirectorHandler.cpp' || echo '$(srcdir)/'`resource/RedirectorHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-RedirectorHandler.Tpo" "$(DEPDIR)/mod_globule_la-RedirectorHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-RedirectorHandler.Tpo"; exit 1; fi
#	source='resource/RedirectorHandler.cpp' object='mod_globule_la-RedirectorHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-RedirectorHandler.lo `test -f 'resource/RedirectorHandler.cpp' || echo '$(srcdir)/'`resource/RedirectorHandler.cpp

mod_globule_la-SourceHandler.lo: resource/SourceHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-SourceHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-SourceHandler.Tpo" -c -o mod_globule_la-SourceHandler.lo `test -f 'resource/SourceHandler.cpp' || echo '$(srcdir)/'`resource/SourceHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-SourceHandler.Tpo" "$(DEPDIR)/mod_globule_la-SourceHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-SourceHandler.Tpo"; exit 1; fi
#	source='resource/SourceHandler.cpp' object='mod_globule_la-SourceHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-SourceHandler.lo `test -f 'resource/SourceHandler.cpp' || echo '$(srcdir)/'`resource/SourceHandler.cpp

mod_globule_la-OriginHandler.lo: resource/OriginHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-OriginHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-OriginHandler.Tpo" -c -o mod_globule_la-OriginHandler.lo `test -f 'resource/OriginHandler.cpp' || echo '$(srcdir)/'`resource/OriginHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-OriginHandler.Tpo" "$(DEPDIR)/mod_globule_la-OriginHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-OriginHandler.Tpo"; exit 1; fi
#	source='resource/OriginHandler.cpp' object='mod_globule_la-OriginHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-OriginHandler.lo `test -f 'resource/OriginHandler.cpp' || echo '$(srcdir)/'`resource/OriginHandler.cpp

mod_globule_la-DatabaseHandler.lo: resource/DatabaseHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-DatabaseHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-DatabaseHandler.Tpo" -c -o mod_globule_la-DatabaseHandler.lo `test -f 'resource/DatabaseHandler.cpp' || echo '$(srcdir)/'`resource/DatabaseHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-DatabaseHandler.Tpo" "$(DEPDIR)/mod_globule_la-DatabaseHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-DatabaseHandler.Tpo"; exit 1; fi
#	source='resource/DatabaseHandler.cpp' object='mod_globule_la-DatabaseHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-DatabaseHandler.lo `test -f 'resource/DatabaseHandler.cpp' || echo '$(srcdir)/'`resource/DatabaseHandler.cpp

mod_globule_la-ProxyHandler.lo: resource/ProxyHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-ProxyHandler.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-ProxyHandler.Tpo" -c -o mod_globule_la-ProxyHandler.lo `test -f 'resource/ProxyHandler.cpp' || echo '$(srcdir)/'`resource/ProxyHandler.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-ProxyHandler.Tpo" "$(DEPDIR)/mod_globule_la-ProxyHandler.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-ProxyHandler.Tpo"; exit 1; fi
#	source='resource/ProxyHandler.cpp' object='mod_globule_la-ProxyHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-ProxyHandler.lo `test -f 'resource/ProxyHandler.cpp' || echo '$(srcdir)/'`resource/ProxyHandler.cpp

mod_globule_la-EventMgr.lo: event/EventMgr.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-EventMgr.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-EventMgr.Tpo" -c -o mod_globule_la-EventMgr.lo `test -f 'event/EventMgr.cpp' || echo '$(srcdir)/'`event/EventMgr.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-EventMgr.Tpo" "$(DEPDIR)/mod_globule_la-EventMgr.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-EventMgr.Tpo"; exit 1; fi
#	source='event/EventMgr.cpp' object='mod_globule_la-EventMgr.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-EventMgr.lo `test -f 'event/EventMgr.cpp' || echo '$(srcdir)/'`event/EventMgr.cpp

mod_globule_la-GlobuleEvent.lo: event/GlobuleEvent.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-GlobuleEvent.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-GlobuleEvent.Tpo" -c -o mod_globule_la-GlobuleEvent.lo `test -f 'event/GlobuleEvent.cpp' || echo '$(srcdir)/'`event/GlobuleEvent.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-GlobuleEvent.Tpo" "$(DEPDIR)/mod_globule_la-GlobuleEvent.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-GlobuleEvent.Tpo"; exit 1; fi
#	source='event/GlobuleEvent.cpp' object='mod_globule_la-GlobuleEvent.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-GlobuleEvent.lo `test -f 'event/GlobuleEvent.cpp' || echo '$(srcdir)/'`event/GlobuleEvent.cpp

mod_globule_la-RedirectEvent.lo: event/RedirectEvent.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-RedirectEvent.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-RedirectEvent.Tpo" -c -o mod_globule_la-RedirectEvent.lo `test -f 'event/RedirectEvent.cpp' || echo '$(srcdir)/'`event/RedirectEvent.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-RedirectEvent.Tpo" "$(DEPDIR)/mod_globule_la-RedirectEvent.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-RedirectEvent.Tpo"; exit 1; fi
#	source='event/RedirectEvent.cpp' object='mod_globule_la-RedirectEvent.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-RedirectEvent.lo `test -f 'event/RedirectEvent.cpp' || echo '$(srcdir)/'`event/RedirectEvent.cpp

mod_globule_la-ReportEvent.lo: event/ReportEvent.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-ReportEvent.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-ReportEvent.Tpo" -c -o mod_globule_la-ReportEvent.lo `test -f 'event/ReportEvent.cpp' || echo '$(srcdir)/'`event/ReportEvent.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-ReportEvent.Tpo" "$(DEPDIR)/mod_globule_la-ReportEvent.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-ReportEvent.Tpo"; exit 1; fi
#	source='event/ReportEvent.cpp' object='mod_globule_la-ReportEvent.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-ReportEvent.lo `test -f 'event/ReportEvent.cpp' || echo '$(srcdir)/'`event/ReportEvent.cpp

mod_globule_la-RegisterEvent.lo: event/RegisterEvent.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-RegisterEvent.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-RegisterEvent.Tpo" -c -o mod_globule_la-RegisterEvent.lo `test -f 'event/RegisterEvent.cpp' || echo '$(srcdir)/'`event/RegisterEvent.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-RegisterEvent.Tpo" "$(DEPDIR)/mod_globule_la-RegisterEvent.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-RegisterEvent.Tpo"; exit 1; fi
#	source='event/RegisterEvent.cpp' object='mod_globule_la-RegisterEvent.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-RegisterEvent.lo `test -f 'event/RegisterEvent.cpp' || echo '$(srcdir)/'`event/RegisterEvent.cpp

mod_globule_la-HttpRequest.lo: netw/HttpRequest.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-HttpRequest.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-HttpRequest.Tpo" -c -o mod_globule_la-HttpRequest.lo `test -f 'netw/HttpRequest.cpp' || echo '$(srcdir)/'`netw/HttpRequest.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-HttpRequest.Tpo" "$(DEPDIR)/mod_globule_la-HttpRequest.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-HttpRequest.Tpo"; exit 1; fi
#	source='netw/HttpRequest.cpp' object='mod_globule_la-HttpRequest.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-HttpRequest.lo `test -f 'netw/HttpRequest.cpp' || echo '$(srcdir)/'`netw/HttpRequest.cpp

mod_globule_la-Url.lo: netw/Url.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-Url.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-Url.Tpo" -c -o mod_globule_la-Url.lo `test -f 'netw/Url.cpp' || echo '$(srcdir)/'`netw/Url.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-Url.Tpo" "$(DEPDIR)/mod_globule_la-Url.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-Url.Tpo"; exit 1; fi
#	source='netw/Url.cpp' object='mod_globule_la-Url.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-Url.lo `test -f 'netw/Url.cpp' || echo '$(srcdir)/'`netw/Url.cpp

mod_globule_la-documents.lo: documents.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-documents.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-documents.Tpo" -c -o mod_globule_la-documents.lo `test -f 'documents.cpp' || echo '$(srcdir)/'`documents.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-documents.Tpo" "$(DEPDIR)/mod_globule_la-documents.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-documents.Tpo"; exit 1; fi
#	source='documents.cpp' object='mod_globule_la-documents.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-documents.lo `test -f 'documents.cpp' || echo '$(srcdir)/'`documents.cpp

mod_globule_la-resources.lo: resources.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-resources.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-resources.Tpo" -c -o mod_globule_la-resources.lo `test -f 'resources.cpp' || echo '$(srcdir)/'`resources.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-resources.Tpo" "$(DEPDIR)/mod_globule_la-resources.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-resources.Tpo"; exit 1; fi
#	source='resources.cpp' object='mod_globule_la-resources.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-resources.lo `test -f 'resources.cpp' || echo '$(srcdir)/'`resources.cpp

mod_globule_la-mod_globule.lo: mod_globule.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -MT mod_globule_la-mod_globule.lo -MD -MP -MF "$(DEPDIR)/mod_globule_la-mod_globule.Tpo" -c -o mod_globule_la-mod_globule.lo `test -f 'mod_globule.cpp' || echo '$(srcdir)/'`mod_globule.cpp; \
	then mv -f "$(DEPDIR)/mod_globule_la-mod_globule.Tpo" "$(DEPDIR)/mod_globule_la-mod_globule.Plo"; else rm -f "$(DEPDIR)/mod_globule_la-mod_globule.Tpo"; exit 1; fi
#	source='mod_globule.cpp' object='mod_globule_la-mod_globule.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mod_globule_la_CXXFLAGS) $(CXXFLAGS) -c -o mod_globule_la-mod_globule.lo `test -f 'mod_globule.cpp' || echo '$(srcdir)/'`mod_globule.cpp

globuledebug-globuledebug.o: globuledebug.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-globuledebug.o -MD -MP -MF "$(DEPDIR)/globuledebug-globuledebug.Tpo" -c -o globuledebug-globuledebug.o `test -f 'globuledebug.cpp' || echo '$(srcdir)/'`globuledebug.cpp; \
	then mv -f "$(DEPDIR)/globuledebug-globuledebug.Tpo" "$(DEPDIR)/globuledebug-globuledebug.Po"; else rm -f "$(DEPDIR)/globuledebug-globuledebug.Tpo"; exit 1; fi
#	source='globuledebug.cpp' object='globuledebug-globuledebug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-globuledebug.o `test -f 'globuledebug.cpp' || echo '$(srcdir)/'`globuledebug.cpp

globuledebug-globuledebug.obj: globuledebug.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-globuledebug.obj -MD -MP -MF "$(DEPDIR)/globuledebug-globuledebug.Tpo" -c -o globuledebug-globuledebug.obj `if test -f 'globuledebug.cpp'; then $(CYGPATH_W) 'globuledebug.cpp'; else $(CYGPATH_W) '$(srcdir)/globuledebug.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuledebug-globuledebug.Tpo" "$(DEPDIR)/globuledebug-globuledebug.Po"; else rm -f "$(DEPDIR)/globuledebug-globuledebug.Tpo"; exit 1; fi
#	source='globuledebug.cpp' object='globuledebug-globuledebug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-globuledebug.obj `if test -f 'globuledebug.cpp'; then $(CYGPATH_W) 'globuledebug.cpp'; else $(CYGPATH_W) '$(srcdir)/globuledebug.cpp'; fi`

globuledebug-BaseHandler.o: resource/BaseHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-BaseHandler.o -MD -MP -MF "$(DEPDIR)/globuledebug-BaseHandler.Tpo" -c -o globuledebug-BaseHandler.o `test -f 'resource/BaseHandler.cpp' || echo '$(srcdir)/'`resource/BaseHandler.cpp; \
	then mv -f "$(DEPDIR)/globuledebug-BaseHandler.Tpo" "$(DEPDIR)/globuledebug-BaseHandler.Po"; else rm -f "$(DEPDIR)/globuledebug-BaseHandler.Tpo"; exit 1; fi
#	source='resource/BaseHandler.cpp' object='globuledebug-BaseHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-BaseHandler.o `test -f 'resource/BaseHandler.cpp' || echo '$(srcdir)/'`resource/BaseHandler.cpp

globuledebug-BaseHandler.obj: resource/BaseHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-BaseHandler.obj -MD -MP -MF "$(DEPDIR)/globuledebug-BaseHandler.Tpo" -c -o globuledebug-BaseHandler.obj `if test -f 'resource/BaseHandler.cpp'; then $(CYGPATH_W) 'resource/BaseHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/resource/BaseHandler.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuledebug-BaseHandler.Tpo" "$(DEPDIR)/globuledebug-BaseHandler.Po"; else rm -f "$(DEPDIR)/globuledebug-BaseHandler.Tpo"; exit 1; fi
#	source='resource/BaseHandler.cpp' object='globuledebug-BaseHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-BaseHandler.obj `if test -f 'resource/BaseHandler.cpp'; then $(CYGPATH_W) 'resource/BaseHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/resource/BaseHandler.cpp'; fi`

globuledebug-Peer.o: resource/Peer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-Peer.o -MD -MP -MF "$(DEPDIR)/globuledebug-Peer.Tpo" -c -o globuledebug-Peer.o `test -f 'resource/Peer.cpp' || echo '$(srcdir)/'`resource/Peer.cpp; \
	then mv -f "$(DEPDIR)/globuledebug-Peer.Tpo" "$(DEPDIR)/globuledebug-Peer.Po"; else rm -f "$(DEPDIR)/globuledebug-Peer.Tpo"; exit 1; fi
#	source='resource/Peer.cpp' object='globuledebug-Peer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-Peer.o `test -f 'resource/Peer.cpp' || echo '$(srcdir)/'`resource/Peer.cpp

globuledebug-Peer.obj: resource/Peer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-Peer.obj -MD -MP -MF "$(DEPDIR)/globuledebug-Peer.Tpo" -c -o globuledebug-Peer.obj `if test -f 'resource/Peer.cpp'; then $(CYGPATH_W) 'resource/Peer.cpp'; else $(CYGPATH_W) '$(srcdir)/resource/Peer.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuledebug-Peer.Tpo" "$(DEPDIR)/globuledebug-Peer.Po"; else rm -f "$(DEPDIR)/globuledebug-Peer.Tpo"; exit 1; fi
#	source='resource/Peer.cpp' object='globuledebug-Peer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-Peer.obj `if test -f 'resource/Peer.cpp'; then $(CYGPATH_W) 'resource/Peer.cpp'; else $(CYGPATH_W) '$(srcdir)/resource/Peer.cpp'; fi`

globuledebug-Storage.o: Storage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-Storage.o -MD -MP -MF "$(DEPDIR)/globuledebug-Storage.Tpo" -c -o globuledebug-Storage.o `test -f 'Storage.cpp' || echo '$(srcdir)/'`Storage.cpp; \
	then mv -f "$(DEPDIR)/globuledebug-Storage.Tpo" "$(DEPDIR)/globuledebug-Storage.Po"; else rm -f "$(DEPDIR)/globuledebug-Storage.Tpo"; exit 1; fi
#	source='Storage.cpp' object='globuledebug-Storage.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-Storage.o `test -f 'Storage.cpp' || echo '$(srcdir)/'`Storage.cpp

globuledebug-Storage.obj: Storage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-Storage.obj -MD -MP -MF "$(DEPDIR)/globuledebug-Storage.Tpo" -c -o globuledebug-Storage.obj `if test -f 'Storage.cpp'; then $(CYGPATH_W) 'Storage.cpp'; else $(CYGPATH_W) '$(srcdir)/Storage.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuledebug-Storage.Tpo" "$(DEPDIR)/globuledebug-Storage.Po"; else rm -f "$(DEPDIR)/globuledebug-Storage.Tpo"; exit 1; fi
#	source='Storage.cpp' object='globuledebug-Storage.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-Storage.obj `if test -f 'Storage.cpp'; then $(CYGPATH_W) 'Storage.cpp'; else $(CYGPATH_W) '$(srcdir)/Storage.cpp'; fi`

globuledebug-HttpRequest.o: netw/HttpRequest.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-HttpRequest.o -MD -MP -MF "$(DEPDIR)/globuledebug-HttpRequest.Tpo" -c -o globuledebug-HttpRequest.o `test -f 'netw/HttpRequest.cpp' || echo '$(srcdir)/'`netw/HttpRequest.cpp; \
	then mv -f "$(DEPDIR)/globuledebug-HttpRequest.Tpo" "$(DEPDIR)/globuledebug-HttpRequest.Po"; else rm -f "$(DEPDIR)/globuledebug-HttpRequest.Tpo"; exit 1; fi
#	source='netw/HttpRequest.cpp' object='globuledebug-HttpRequest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-HttpRequest.o `test -f 'netw/HttpRequest.cpp' || echo '$(srcdir)/'`netw/HttpRequest.cpp

globuledebug-HttpRequest.obj: netw/HttpRequest.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-HttpRequest.obj -MD -MP -MF "$(DEPDIR)/globuledebug-HttpRequest.Tpo" -c -o globuledebug-HttpRequest.obj `if test -f 'netw/HttpRequest.cpp'; then $(CYGPATH_W) 'netw/HttpRequest.cpp'; else $(CYGPATH_W) '$(srcdir)/netw/HttpRequest.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuledebug-HttpRequest.Tpo" "$(DEPDIR)/globuledebug-HttpRequest.Po"; else rm -f "$(DEPDIR)/globuledebug-HttpRequest.Tpo"; exit 1; fi
#	source='netw/HttpRequest.cpp' object='globuledebug-HttpRequest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-HttpRequest.obj `if test -f 'netw/HttpRequest.cpp'; then $(CYGPATH_W) 'netw/HttpRequest.cpp'; else $(CYGPATH_W) '$(srcdir)/netw/HttpRequest.cpp'; fi`

globuledebug-Url.o: netw/Url.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-Url.o -MD -MP -MF "$(DEPDIR)/globuledebug-Url.Tpo" -c -o globuledebug-Url.o `test -f 'netw/Url.cpp' || echo '$(srcdir)/'`netw/Url.cpp; \
	then mv -f "$(DEPDIR)/globuledebug-Url.Tpo" "$(DEPDIR)/globuledebug-Url.Po"; else rm -f "$(DEPDIR)/globuledebug-Url.Tpo"; exit 1; fi
#	source='netw/Url.cpp' object='globuledebug-Url.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-Url.o `test -f 'netw/Url.cpp' || echo '$(srcdir)/'`netw/Url.cpp

globuledebug-Url.obj: netw/Url.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-Url.obj -MD -MP -MF "$(DEPDIR)/globuledebug-Url.Tpo" -c -o globuledebug-Url.obj `if test -f 'netw/Url.cpp'; then $(CYGPATH_W) 'netw/Url.cpp'; else $(CYGPATH_W) '$(srcdir)/netw/Url.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuledebug-Url.Tpo" "$(DEPDIR)/globuledebug-Url.Po"; else rm -f "$(DEPDIR)/globuledebug-Url.Tpo"; exit 1; fi
#	source='netw/Url.cpp' object='globuledebug-Url.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-Url.obj `if test -f 'netw/Url.cpp'; then $(CYGPATH_W) 'netw/Url.cpp'; else $(CYGPATH_W) '$(srcdir)/netw/Url.cpp'; fi`

globuledebug-utilities.o: utilities.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-utilities.o -MD -MP -MF "$(DEPDIR)/globuledebug-utilities.Tpo" -c -o globuledebug-utilities.o `test -f 'utilities.cpp' || echo '$(srcdir)/'`utilities.cpp; \
	then mv -f "$(DEPDIR)/globuledebug-utilities.Tpo" "$(DEPDIR)/globuledebug-utilities.Po"; else rm -f "$(DEPDIR)/globuledebug-utilities.Tpo"; exit 1; fi
#	source='utilities.cpp' object='globuledebug-utilities.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-utilities.o `test -f 'utilities.cpp' || echo '$(srcdir)/'`utilities.cpp

globuledebug-utilities.obj: utilities.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-utilities.obj -MD -MP -MF "$(DEPDIR)/globuledebug-utilities.Tpo" -c -o globuledebug-utilities.obj `if test -f 'utilities.cpp'; then $(CYGPATH_W) 'utilities.cpp'; else $(CYGPATH_W) '$(srcdir)/utilities.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuledebug-utilities.Tpo" "$(DEPDIR)/globuledebug-utilities.Po"; else rm -f "$(DEPDIR)/globuledebug-utilities.Tpo"; exit 1; fi
#	source='utilities.cpp' object='globuledebug-utilities.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-utilities.obj `if test -f 'utilities.cpp'; then $(CYGPATH_W) 'utilities.cpp'; else $(CYGPATH_W) '$(srcdir)/utilities.cpp'; fi`

globuledebug-exceptions.o: exceptions.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-exceptions.o -MD -MP -MF "$(DEPDIR)/globuledebug-exceptions.Tpo" -c -o globuledebug-exceptions.o `test -f 'exceptions.cpp' || echo '$(srcdir)/'`exceptions.cpp; \
	then mv -f "$(DEPDIR)/globuledebug-exceptions.Tpo" "$(DEPDIR)/globuledebug-exceptions.Po"; else rm -f "$(DEPDIR)/globuledebug-exceptions.Tpo"; exit 1; fi
#	source='exceptions.cpp' object='globuledebug-exceptions.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-exceptions.o `test -f 'exceptions.cpp' || echo '$(srcdir)/'`exceptions.cpp

globuledebug-exceptions.obj: exceptions.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuledebug-exceptions.obj -MD -MP -MF "$(DEPDIR)/globuledebug-exceptions.Tpo" -c -o globuledebug-exceptions.obj `if test -f 'exceptions.cpp'; then $(CYGPATH_W) 'exceptions.cpp'; else $(CYGPATH_W) '$(srcdir)/exceptions.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuledebug-exceptions.Tpo" "$(DEPDIR)/globuledebug-exceptions.Po"; else rm -f "$(DEPDIR)/globuledebug-exceptions.Tpo"; exit 1; fi
#	source='exceptions.cpp' object='globuledebug-exceptions.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuledebug_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuledebug-exceptions.obj `if test -f 'exceptions.cpp'; then $(CYGPATH_W) 'exceptions.cpp'; else $(CYGPATH_W) '$(srcdir)/exceptions.cpp'; fi`

globuleprobe-globuleprobe.o: globuleprobe.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-globuleprobe.o -MD -MP -MF "$(DEPDIR)/globuleprobe-globuleprobe.Tpo" -c -o globuleprobe-globuleprobe.o `test -f 'globuleprobe.cpp' || echo '$(srcdir)/'`globuleprobe.cpp; \
	then mv -f "$(DEPDIR)/globuleprobe-globuleprobe.Tpo" "$(DEPDIR)/globuleprobe-globuleprobe.Po"; else rm -f "$(DEPDIR)/globuleprobe-globuleprobe.Tpo"; exit 1; fi
#	source='globuleprobe.cpp' object='globuleprobe-globuleprobe.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-globuleprobe.o `test -f 'globuleprobe.cpp' || echo '$(srcdir)/'`globuleprobe.cpp

globuleprobe-globuleprobe.obj: globuleprobe.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-globuleprobe.obj -MD -MP -MF "$(DEPDIR)/globuleprobe-globuleprobe.Tpo" -c -o globuleprobe-globuleprobe.obj `if test -f 'globuleprobe.cpp'; then $(CYGPATH_W) 'globuleprobe.cpp'; else $(CYGPATH_W) '$(srcdir)/globuleprobe.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuleprobe-globuleprobe.Tpo" "$(DEPDIR)/globuleprobe-globuleprobe.Po"; else rm -f "$(DEPDIR)/globuleprobe-globuleprobe.Tpo"; exit 1; fi
#	source='globuleprobe.cpp' object='globuleprobe-globuleprobe.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-globuleprobe.obj `if test -f 'globuleprobe.cpp'; then $(CYGPATH_W) 'globuleprobe.cpp'; else $(CYGPATH_W) '$(srcdir)/globuleprobe.cpp'; fi`

globuleprobe-Storage.o: Storage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-Storage.o -MD -MP -MF "$(DEPDIR)/globuleprobe-Storage.Tpo" -c -o globuleprobe-Storage.o `test -f 'Storage.cpp' || echo '$(srcdir)/'`Storage.cpp; \
	then mv -f "$(DEPDIR)/globuleprobe-Storage.Tpo" "$(DEPDIR)/globuleprobe-Storage.Po"; else rm -f "$(DEPDIR)/globuleprobe-Storage.Tpo"; exit 1; fi
#	source='Storage.cpp' object='globuleprobe-Storage.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-Storage.o `test -f 'Storage.cpp' || echo '$(srcdir)/'`Storage.cpp

globuleprobe-Storage.obj: Storage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-Storage.obj -MD -MP -MF "$(DEPDIR)/globuleprobe-Storage.Tpo" -c -o globuleprobe-Storage.obj `if test -f 'Storage.cpp'; then $(CYGPATH_W) 'Storage.cpp'; else $(CYGPATH_W) '$(srcdir)/Storage.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuleprobe-Storage.Tpo" "$(DEPDIR)/globuleprobe-Storage.Po"; else rm -f "$(DEPDIR)/globuleprobe-Storage.Tpo"; exit 1; fi
#	source='Storage.cpp' object='globuleprobe-Storage.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-Storage.obj `if test -f 'Storage.cpp'; then $(CYGPATH_W) 'Storage.cpp'; else $(CYGPATH_W) '$(srcdir)/Storage.cpp'; fi`

globuleprobe-HttpRequest.o: netw/HttpRequest.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-HttpRequest.o -MD -MP -MF "$(DEPDIR)/globuleprobe-HttpRequest.Tpo" -c -o globuleprobe-HttpRequest.o `test -f 'netw/HttpRequest.cpp' || echo '$(srcdir)/'`netw/HttpRequest.cpp; \
	then mv -f "$(DEPDIR)/globuleprobe-HttpRequest.Tpo" "$(DEPDIR)/globuleprobe-HttpRequest.Po"; else rm -f "$(DEPDIR)/globuleprobe-HttpRequest.Tpo"; exit 1; fi
#	source='netw/HttpRequest.cpp' object='globuleprobe-HttpRequest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-HttpRequest.o `test -f 'netw/HttpRequest.cpp' || echo '$(srcdir)/'`netw/HttpRequest.cpp

globuleprobe-HttpRequest.obj: netw/HttpRequest.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-HttpRequest.obj -MD -MP -MF "$(DEPDIR)/globuleprobe-HttpRequest.Tpo" -c -o globuleprobe-HttpRequest.obj `if test -f 'netw/HttpRequest.cpp'; then $(CYGPATH_W) 'netw/HttpRequest.cpp'; else $(CYGPATH_W) '$(srcdir)/netw/HttpRequest.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuleprobe-HttpRequest.Tpo" "$(DEPDIR)/globuleprobe-HttpRequest.Po"; else rm -f "$(DEPDIR)/globuleprobe-HttpRequest.Tpo"; exit 1; fi
#	source='netw/HttpRequest.cpp' object='globuleprobe-HttpRequest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-HttpRequest.obj `if test -f 'netw/HttpRequest.cpp'; then $(CYGPATH_W) 'netw/HttpRequest.cpp'; else $(CYGPATH_W) '$(srcdir)/netw/HttpRequest.cpp'; fi`

globuleprobe-Url.o: netw/Url.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-Url.o -MD -MP -MF "$(DEPDIR)/globuleprobe-Url.Tpo" -c -o globuleprobe-Url.o `test -f 'netw/Url.cpp' || echo '$(srcdir)/'`netw/Url.cpp; \
	then mv -f "$(DEPDIR)/globuleprobe-Url.Tpo" "$(DEPDIR)/globuleprobe-Url.Po"; else rm -f "$(DEPDIR)/globuleprobe-Url.Tpo"; exit 1; fi
#	source='netw/Url.cpp' object='globuleprobe-Url.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-Url.o `test -f 'netw/Url.cpp' || echo '$(srcdir)/'`netw/Url.cpp

globuleprobe-Url.obj: netw/Url.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-Url.obj -MD -MP -MF "$(DEPDIR)/globuleprobe-Url.Tpo" -c -o globuleprobe-Url.obj `if test -f 'netw/Url.cpp'; then $(CYGPATH_W) 'netw/Url.cpp'; else $(CYGPATH_W) '$(srcdir)/netw/Url.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuleprobe-Url.Tpo" "$(DEPDIR)/globuleprobe-Url.Po"; else rm -f "$(DEPDIR)/globuleprobe-Url.Tpo"; exit 1; fi
#	source='netw/Url.cpp' object='globuleprobe-Url.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-Url.obj `if test -f 'netw/Url.cpp'; then $(CYGPATH_W) 'netw/Url.cpp'; else $(CYGPATH_W) '$(srcdir)/netw/Url.cpp'; fi`

globuleprobe-utilities.o: utilities.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-utilities.o -MD -MP -MF "$(DEPDIR)/globuleprobe-utilities.Tpo" -c -o globuleprobe-utilities.o `test -f 'utilities.cpp' || echo '$(srcdir)/'`utilities.cpp; \
	then mv -f "$(DEPDIR)/globuleprobe-utilities.Tpo" "$(DEPDIR)/globuleprobe-utilities.Po"; else rm -f "$(DEPDIR)/globuleprobe-utilities.Tpo"; exit 1; fi
#	source='utilities.cpp' object='globuleprobe-utilities.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-utilities.o `test -f 'utilities.cpp' || echo '$(srcdir)/'`utilities.cpp

globuleprobe-utilities.obj: utilities.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-utilities.obj -MD -MP -MF "$(DEPDIR)/globuleprobe-utilities.Tpo" -c -o globuleprobe-utilities.obj `if test -f 'utilities.cpp'; then $(CYGPATH_W) 'utilities.cpp'; else $(CYGPATH_W) '$(srcdir)/utilities.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuleprobe-utilities.Tpo" "$(DEPDIR)/globuleprobe-utilities.Po"; else rm -f "$(DEPDIR)/globuleprobe-utilities.Tpo"; exit 1; fi
#	source='utilities.cpp' object='globuleprobe-utilities.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-utilities.obj `if test -f 'utilities.cpp'; then $(CYGPATH_W) 'utilities.cpp'; else $(CYGPATH_W) '$(srcdir)/utilities.cpp'; fi`

globuleprobe-exceptions.o: exceptions.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-exceptions.o -MD -MP -MF "$(DEPDIR)/globuleprobe-exceptions.Tpo" -c -o globuleprobe-exceptions.o `test -f 'exceptions.cpp' || echo '$(srcdir)/'`exceptions.cpp; \
	then mv -f "$(DEPDIR)/globuleprobe-exceptions.Tpo" "$(DEPDIR)/globuleprobe-exceptions.Po"; else rm -f "$(DEPDIR)/globuleprobe-exceptions.Tpo"; exit 1; fi
#	source='exceptions.cpp' object='globuleprobe-exceptions.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-exceptions.o `test -f 'exceptions.cpp' || echo '$(srcdir)/'`exceptions.cpp

globuleprobe-exceptions.obj: exceptions.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT globuleprobe-exceptions.obj -MD -MP -MF "$(DEPDIR)/globuleprobe-exceptions.Tpo" -c -o globuleprobe-exceptions.obj `if test -f 'exceptions.cpp'; then $(CYGPATH_W) 'exceptions.cpp'; else $(CYGPATH_W) '$(srcdir)/exceptions.cpp'; fi`; \
	then mv -f "$(DEPDIR)/globuleprobe-exceptions.Tpo" "$(DEPDIR)/globuleprobe-exceptions.Po"; else rm -f "$(DEPDIR)/globuleprobe-exceptions.Tpo"; exit 1; fi
#	source='exceptions.cpp' object='globuleprobe-exceptions.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(globuleprobe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o globuleprobe-exceptions.obj `if test -f 'exceptions.cpp'; then $(CYGPATH_W) 'exceptions.cpp'; else $(CYGPATH_W) '$(srcdir)/exceptions.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(mkdir_p) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) config.h
install-binPROGRAMS: install-libLTLIBRARIES

installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-libtool distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS install-libLTLIBRARIES

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am \
	uninstall-libLTLIBRARIES

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am \
	clean clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-recursive ctags ctags-recursive distclean \
	distclean-compile distclean-generic distclean-hdr \
	distclean-libtool distclean-recursive distclean-tags distdir \
	dvi dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-exec \
	install-exec-am install-info install-info-am \
	install-libLTLIBRARIES install-man install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic maintainer-clean-recursive \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool mostlyclean-recursive pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-info-am \
	uninstall-libLTLIBRARIES

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
